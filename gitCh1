- 1-1 버전관리란? Version Control System
    - 버전관리란 무엇일까
        
        버전관리시스템(VCS)은 파일의 변경 이력을 확인하거나 변경 내역을 추적하여 이전 상태로 복구 및 가져오는데 사용된다. 소프트웨어 코드뿐만 아니라 이미지, 레이아웃 등 다양한 파일에 적용할 수 있다.  VCS를 통해 데이터를 안전하게 보관하고 협업을 효율적으로 진행 할 수 있다.
        
    - 버전관리의 종류
        - 로컬 버전관리
            
            로컬 버전 관리(Local Version Control)는 개인의 컴퓨터에 파일의 변경 내역을 저장하는 방식이다
            
            장점 : 간단하고 쉽게 사용할 수 있다.
            
            단점 : 데이터를 잃을 위험이 높고, 여러 사람과 협업하기 어렵다.
            
            ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d5f81b12-c996-4317-ac66-4e27e98c1f9b/Untitled.png)
            
        - 중앙집권식 버전관리
            
            중앙 집중식 버전 관리(Centralized Version Control, CVCS)는 중앙 서버에 파일 변경 내역을 저장하여 여러 사람이 협업하는데 사용된다
            
            장점 : 여러 사람과 협업하기 쉽고, 중앙에서 권한 관리가 가능하다.
            
            단점 : 중앙 서버에 문제가 생기면 작업이 중단될 수 있고, 데이터를 잃을 위험이 있다.
            
            ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/959d0106-b751-46fe-a67e-791f10280112/Untitled.png)
            
        - 분산 버전 관리
            
            분산 버전 관리(Distributed Version Control, DVCS)는 참여자 각각이 파일 저장소에 전체 복사본을 가지고 작업하는 방식이다.
            
            장점 : 
            
            중앙 서버에 의존하지 않고, 여러 사람과 효율적으로 협업할 수 있다.
            
            각자의 로컬에서 전체 저장소의 복사본을 가지고 있기 때문에 데이터 손실 위험이 낮다.
            
            단점: 초기 설정이 복잡할 수 있고, 대규모 프로젝트에서 저장소 크기가 커질 수 있다.
            
            ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/683f5fed-f647-477a-a3b7-e96709a4f98b/Untitled.png)
            
- 1-2 짧게 보는 Git의 역사
    
    우리네 삶의 삼라만상처럼 Git 또한 창조적 파괴와 활활 타오르는 갈등 속에서 시작됐다.
    
    Linux 커널은 굉장히 규모가 큰 오픈소스 프로젝트다. Linux 커널의 삶 대부분은(1991–2002) Patch와 단순 압축 파일로만 관리했다. 2002년에 드디어 Linux 커널은 BitKeeper라고 불리는 상용 DVCS를 사용하기 시작했다.
    
    2005년에 커뮤니티가 만드는 Linux 커널과 이익을 추구하는 회사가 개발한 BitKeeper의 관계는 틀어졌다. BitKeeper의 무료 사용이 재고된 것이다. 이 사건은 Linux 개발 커뮤니티(특히 Linux 창시자 Linus Torvalds)가 자체 도구를 만드는 계기가 됐다. Git은 BitKeeper를 사용하면서 배운 교훈을 기초로 아래와 같은 목표를 세웠다.
    
    - 빠른 속도
    - 단순한 구조
    - 비선형적인 개발(수천 개의 동시 다발적인 브랜치)
    - 완벽한 분산
    - Linux 커널 같은 대형 프로젝트에도 유용할 것(속도나 데이터 크기 면에서)
    
    Git은 2005년 탄생하고 나서 아직도 초기 목표를 그대로 유지하고 있다. 그러면서도 사용하기 쉽게 진화하고 성숙했다. Git은 미친 듯이 빨라서 대형 프로젝트에 사용하기도 좋다. Git은 동시다발적인 브랜치에도 끄떡없는 슈퍼 울트라 브랜칭 시스템이다([Git 브랜치](https://git-scm.com/book/ko/v2/ch00/ch03-git-branching) 참고).
    
    reference from [https://git-scm.com/book/ko/v2/시작하기-짧게-보는-Git의-역사](https://git-scm.com/book/ko/v2/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-%EC%A7%A7%EA%B2%8C-%EB%B3%B4%EB%8A%94-Git%EC%9D%98-%EC%97%AD%EC%82%AC)
    
- 1-3 Git 기초
    
    GIT의 핵심은 무엇일까?
    
    - **스냅샷**
        
        Git은 데이터를 파일 시스템의 스냅샷으로 관리한다. 즉, 파일들의 상태를 특정 시점에 기록하여, 이전 상태로 쉽게 돌아갈 수 있게 해준다. 이와 달리 다른 VCS들은 파일 변경사항들을 시간 순으로 기록한다.
        
    - **로컬에서의 빠른 작업**
        
        Git은 프로젝트의 전체 히스토리를 로컬 저장소에 저장하므로 네트워크 지연 없이 빠르게 작업할 수 있다. 오프라인 상태에서도 변경사항을 커밋할 수 있다.
        
    - **데이터 무결성**
        
        Git은 체크섬(SHA-1 해시)을 사용하여 데이터의 무결성을 보장한다. 데이터를 저장하기 전에 체크섬을 생성하고, 이를 기반으로 데이터를 식별 및 관리한다.
        
    - **데이터 추가**
        
        Git에서 수행하는 작업은 데이터를 추가하는 형태다. 일단 데이터가 커밋되면, 삭제하거나 되돌릴 수 없으므로, 데이터 손실 가능성이 낮다.
        
    - **세 가지 상태와 세 가지 단계**
        
        Git은 파일을 Committed(커밋됨), Modified(수정됨), Staged(커밋 대기) 상태로 관리한다. 또한 워킹 트리(작업 중인 파일들), Staging Area(커밋할 스냅샷을 준비하는 공간), Git 디렉토리(Git 데이터와 메타데이터가 저장되는 곳)라는 세 가지 단계로 작업을 구분한다. 워킹 트리에서 파일을 수정하고, Staging Area에서 커밋할 파일들을 준비한 후, Git 디렉토리에 커밋하여 영구적인 스냅샷으로 저장한다.
        
    - **요약**
        
        요약하면, Git은 스냅샷 기반의 데이터 관리, 로컬에서의 빠른 작업 처리, 데이터 무결성 보장, 그리고 파일 상태와 작업 단계를 명확하게 구분하여 효율적인 버전 관리를 수행한다.
        
- 1-4 CLI (Command-Line Interface)
    
    (Git 홈페이지 본문에서의 CLI의 글 : Git을 사용하는 방법은 많다. CLI로 사용할 수도 있고 GUI를 사용할 수도 있다. 이 책에서는 Git CLI 사용법을 설명한다. Git의 모든 기능을 지원하는 것은 CLI 뿐이다. GUI 프로그램의 대부분은 Git 기능 중 일부만 구현하기 때문에 비교적 단순하다. CLI를 사용할 줄 알면 GUI도 사용할 수 있지만 반대는 성립하지 않는다. GUI를 사용하고 싶더라도 CLI가 기본으로 설치되는 도구이기 때문에 CLI기준으로 설명하겠다.)
    
    - CLI란?
        
        CLI는 Command Line Interface(명령 줄 인터페이스)의 약자로, 사용자가 텍스트 기반의 명령어를 입력하여 컴퓨터와 상호작용하는 방식을 말한다. 쉽게 말해, CLI는 키보드로 명령어를 타이핑해서 컴퓨터에게 원하는 작업을 시키는 것이다.
        
        카페에서 주문을 받는 상황을 한 예로 들자면
        
        1. **GUI(그래픽 사용자 인터페이스) 방식**: 손님은 메뉴판을 보고 원하는 메뉴를 가리키고, 우리는 POS 시스템에 있는 버튼을 눌러 주문을 입력한다. 여기서 메뉴판과 버튼이 그래픽 요소인데, 이게 바로 GUI 방식이다.
        2. **CLI(명령 줄 인터페이스) 방식**: 이번엔 손님은 원하는 메뉴의 코드 번호를 말하고, 우리는 컴퓨터에 그 번호를 입력하여 주문을 처리한다.
        
        컴퓨터를 사용할 때도 비슷하다.
        
        - **GUI**: 우리는 마우스로 아이콘을 클릭하고, 창을 드래그하는 등 시각적인 요소를 사용해서 작업을 수행한다. 예를 들면, 파일을 클릭해서 폴더로 드래그하여 옮기는 것과 같은 작업이다.
        - **CLI**: 키보드로 명령어를 입력하여 작업을 수행한다. 예를 들면, 텍스트를 입력해서 파일을 생성하거나, 특정 명령어를 사용하여 파일을 다른 위치로 이동시키는 것과 같은 작업들이다.
        
        CLI의 장점은 빠르고 효율적으로 작업을 수행할 수 있다는 것이다. 한 번에 여러 명령어를 실행하거나, 복잡한 작업을 자동화하는 스크립트를 작성할 수 있다. 하지만, 처음 사용자에게는 조금 어렵게 느껴질 수 있고, 사용할 수 있는 명령어를 알아야 한다.
        
        반면, GUI는 직관적이고 쉽게 사용할 수 있지만, 때때로 CLI보다 느리고 덜 효율적일 수 있다.
        
    
    [그래서 우리는 Mac의 Terminal이나 Windows의 CMD나 Powershell을 실행시키는 방법은 알고 있을 거라고 가정했다. 만약 이 말이 무슨 말인지 모르겠다면 일단 여기서 멈추고 Terminal이나 Powershell에 대해 알아보기 바란다. ]
    
    - Terminal과 Powershell이란?
        
        Terminal과 PowerShell은 대표적인 커맨드 라인 인터페이스(CLI)이다. 이 두 인터페이스를 사용하여 컴퓨터의 작업을 문자 기반 명령어로 수행할 수 있다.
        
    
- 1-5 Git 설치
    
    Linux, Mac, 및 Windows에서 Git을 설치하는 기본적인 방법
    
    - Linux
        1. Fedora 및 RPM 기반 시스템(RHEL, CentOS)에서는 dnf 패키지 관리자를 사용하여 Git을 설치할 수 있다.
        
        ```
        cssCopy code
        $ sudo dnf install git-all
        ```
        
        1. Ubuntu와 같은 데비안 기반 시스템에서는 apt 패키지 관리자를 사용한다.
        
        ```
        cssCopy code
        $ sudo apt install git-all
        ```
        
    - Mac
        1. Xcode Command Line Tools를 설치하여 Git을 간단히 설치할 수 있다. Terminal에서 'git'을 실행하여 설치할 수 있도록 안내 받을 수 있다.
        
        ```
        cssCopy code
        $ git --version
        ```
        
        1. 더 최신 버전의 Git을 설치하려면, Git 웹사이트에서 macOS용 Git 인스톨러를 다운로드 할 수 있다.
        
        ```
        arduinoCopy code
        http://git-scm.com/download/mac
        ```
        
    - Window
        - 1. Git 웹사이트에서 공식 배포판을 다운로드하여 설치
            
            ```
            http://git-scm.com/download/win
            ```
            
            1. Git Chocolatey 패키지를 사용하여 자동화된 설치 방식으로도 Git을 설치 가능.
            2. 'GitHub Desktop'을 설치하여 Git CLI와 GUI를 함께 사용할 수 있음 → GitHub Desktop 웹사이트에서 다운로드
        - 2.  소스코드로 설치
            1. Git의 최신 버전을 설치하려면 소스코드로 직접 컴파일하여 설치할 수 있음. 이 방법은 Git과 그 의존성들을 직접 빌드함.
            2. 의존 라이브러리를 설치한 후, Git의 소스코드를 다운로드 받아 컴파일하고 설치함.
            
            ```
            $ tar -zxf git-2.0.0.tar.gz
            $ cd git-2.0.0
            $ make configure
            $ ./configure --prefix=/usr
            $ make all doc info
            $ sudo make install install-doc install-html install-info
            ```
            
            이렇게 설치한 Git을 사용하여 Git의 소스코드를 클론받아 추가 수정 가능.
            
            ```
            $ git clone git://git.kernel.org/pub/scm/git/git.git
            ```
            
    
- 1-6 Git 최초 설정
    
    
- 1-7 도움말 보기
    
    ```
    $ git help <verb>
    $ man git-<verb>
    
    $ git help config
    
    $ git add -h
    usage: git add [<options>] [--] <pathspec>...
    
        -n, --dry-run         dry run
        -v, --verbose         be verbose
    
        -i, --interactive     interactive picking
        -p, --patch           select hunks interactively
        -e, --edit            edit current diff and apply
        -f, --force           allow adding otherwise ignored files
        -u, --update          update tracked files
        -N, --intent-to-add   record only the fact that the path will be added later
        -A, --all             add changes from all tracked and untracked files
        --ignore-removal      ignore paths removed in the working tree (same as --no-all)
        --refresh             don't add, only refresh the index
        --ignore-errors       just skip files which cannot be added because of errors
        --ignore-missing      check if - even missing - files are ignored in dry run
        --chmod <(+/-)x>      override the executable bit of the listed files
    ```
    
- 1-8 요약
    - Git이란 무엇인가
    - Git기초와 다른 CVCS의 차이점
    - Git 설치방법과 최초 설정
